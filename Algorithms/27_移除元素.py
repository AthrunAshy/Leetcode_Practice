# 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。

# 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。

# 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。

 

# 说明:

# 为什么返回数值是整数，但输出的答案是数组呢?

# 请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。

# 你可以想象内部操作如下:

# // nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝
# int len = removeElement(nums, val);

# // 在函数里修改输入数组对于调用者是可见的。
# // 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。
# for (int i = 0; i < len; i++) {
#     print(nums[i]);
# }
 

# 示例 1：

# 输入：nums = [3,2,2,3], val = 3
# 输出：2, nums = [2,2]
# 解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。
# 示例 2：

# 输入：nums = [0,1,2,2,3,0,4,2], val = 2
# 输出：5, nums = [0,1,3,0,4]
# 解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。
 

# 提示：

# 0 <= nums.length <= 100
# 0 <= nums[i] <= 50
# 0 <= val <= 100


# Python 代码：

class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        # 双指针法
        left = 0
        right = len(nums) - 1
        while left <= right:
            # 若出现了 val，则将其与右指针指向的元素交换，并将右指针向左移动
            if nums[left] == val:
                nums[left], nums[right] = nums[right], nums[left]
                right -= 1
            else:
                # 若没有出现 val，则左指针向右移动
                left += 1
        # 最终把不等于 val 的元素移动到左边，返回左指针的位置
        return left
    
# 时间复杂度：O(n)，一次遍历数组
# 空间复杂度：O(1)，只使用了常数个额外空间

# 双指针法的思路：
# 我们使用两个指针，一个指向数组的左端，一个指向数组的右端。
# 从左端开始遍历数组，遇到等于 val 的元素时，将该元素与右指针指向的元素交换，并将右指针向左移动。
# 继续从左端开始遍历，直到左指针在右指针的左边，这样就能保证数组中不等于 val 的元素都在左边，而等于 val 的元素都在右边。
# 最后，我们返回左指针的位置，即数组中不等于 val 的元素的个数。

# 虽然函数返回的是一个整数（即新数组的长度），但实际上调用者可以通过修改输入数组来获取修改后的数组内容。
# 这是因为在Python中，列表等 可变对象 是以 引用 方式传递的，这意味着函数内对列表的修改会影响到调用者所持有的相同列表对象。
# 具体来说，在这个问题中，调用 removeElement(nums, val) 函数会返回修改后数组的新长度，
# 调用者可以根据这个长度来打印数组中对应范围内的元素，因为数组已经在函数内被修改了。

# 这样的设计可以避免在函数内部对数组进行拷贝，节省了额外的内存开销。
# 当需要在函数内修改输入的可变对象（如列表、字典等）时，可以考虑这种传引用方式，以减少不必要的内存消耗和复杂度。
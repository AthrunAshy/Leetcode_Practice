# 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

# 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

 

# 示例 1：

# 输入：n = 2
# 输出：2
# 解释：有两种方法可以爬到楼顶。
# 1. 1 阶 + 1 阶
# 2. 2 阶
# 示例 2：

# 输入：n = 3
# 输出：3
# 解释：有三种方法可以爬到楼顶。
# 1. 1 阶 + 1 阶 + 1 阶
# 2. 1 阶 + 2 阶
# 3. 2 阶 + 1 阶
 

# 提示：

# 1 <= n <= 45


# Python 代码：

class Solution:
    def climbStairs(self, n: int) -> int:
        if n <= 1:
            return 1

        # 先定义一个长度为 n+1 的数组，dp[i] 表示爬到第 i 阶的方法数
        dp = [0] * (n + 1)
        dp[0] = 1
        dp[1] = 1

        for i in range(2, n + 1):
            dp[i] = dp[i - 1] + dp[i - 2]
        
        return dp[n]
    
# 当 n = 1 时，只有一种方法，即 1 阶。
# 当 n = 2 时，有两种方法，即 1 阶 + 1 阶 和 2 阶。
# 因此，dp[1] = 1，dp[2] = 2。

# 对于 n > 2 的情况，可以从 dp[i-1] 和 dp[i-2] 两个状态转移过来。
# 假设 dp[i-1] 表示爬到第 i-1 阶的方法数，dp[i-2] 表示爬到第 i-2 阶的方法数。
# 则 dp[i] = dp[i-1] + dp[i-2]，即爬到第 i 阶的方法数等于爬到第 i-1 阶的方法数和第 i-2 阶的方法数之和。
# 因为从 i-1 级走到 i 级，就是走1级，可以确定最后一步是1级，这1步是确定的，所以前面x-1级会走出多少种情况就是 dp[i-1] 。
# 如果是从 i-2 级走到 i 级，就是走2级，可以确定最后一步是2级，这1步也是确定的，所以前面x-2级会走出多少种情况就是 dp[i-2] 。
# 而 i 级的最后一步一定是1级或2级，即上述2种情况，所以结果是 dp[i-1] + dp[i-2] 。

# 综上，dp[i] = dp[i-1] + dp[i-2]，由此向前推，由 dp[1] 到 dp[2] 即可得到所有 dp[i] 的值。

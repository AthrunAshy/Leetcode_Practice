# 给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。

# 有效字符串需满足：

# 左括号必须用相同类型的右括号闭合。
# 左括号必须以正确的顺序闭合。
# 每个右括号都有一个对应的相同类型的左括号。
 

# 示例 1：

# 输入：s = "()"
# 输出：true
# 示例 2：

# 输入：s = "()[]{}"
# 输出：true
# 示例 3：

# 输入：s = "(]"
# 输出：false
 

# 提示：

# 1 <= s.length <= 104
# s 仅由括号 '()[]{}' 组成


# Python 代码：

class Solution:
    def isValid(self, s: str) -> bool:
        # dic存储字符串中右括号与左括号键对值，多加了一个键值对'?': '?'
        # 是为了防止字符串第一个元素是右括号时，使用stack.pop()会因为栈空报错
        dic = {'{': '}',  '[': ']', '(': ')', '?': '?'}
        # 创建一个列表作栈，里面先加入一个字符 '?'，是为了防止栈空报错
        stack = ['?']
        for c in s:
        # 因为dic中的key都是左括号，如果这个c字符是左括号，那么就把它添加到stack中
            if c in dic: stack.append(c)
        # 如果字符串中的这个元素不在字典中，则为右括号，则需要判断栈顶元素是否是对应的左括号，
        # 若不匹配，则返回False，无需继续判断；否则弹出栈顶元素，继续判断下一个字符
            elif dic[stack.pop()] != c: return False 
        # 1.字符串是符合题目要求的，即stack中所有左括号都被对应右括号 pop 出来，只剩下了原先填充的 '?' ，len(stack) == 1的结果为True
        # 2.字符串是不符合题目要求的，即stack除了'？'中还有未匹配的左括号元素，stack长度大于1，那就返回False
        return len(stack) == 1